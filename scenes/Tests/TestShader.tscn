[gd_scene load_steps=8 format=2]

[ext_resource path="res://resources/sprites/maps/other-tree.png" type="Texture" id=1]
[ext_resource path="res://resources/sprites/maps/chestnut-tree.png" type="Texture" id=2]

[sub_resource type="Shader" id=1]
code = "// original wind shader from https://github.com/Maujoe/godot-simple-wind-shader-2d/tree/master/assets/maujoe.simple_wind_shader_2d
// original script modified by HungryProton so that the assets are moving differently : https://pastebin.com/VL3AfV8D
//
// speed - The speed of the wind movement.
// minStrength - The minimal strength of the wind movement.
// maxStrength - The maximal strength of the wind movement.
// strengthScale - Scalefactor for the wind strength.
// interval - The time between minimal and maximal strength changes.
// detail - The detail (number of waves) of the wind movement.
// distortion - The strength of geometry distortion.
// heightOffset - The height where the wind begins to move. By default 0.0.

shader_type canvas_item;
render_mode blend_mix;

// Wind settings.
uniform float speed = 1.0;
uniform float minStrength : hint_range(0.0, 1.0) = 0.05;
uniform float maxStrength : hint_range(0.0, 1.0) = 0.01;
uniform float strengthScale = 100.0;
uniform float interval = 3.5;
uniform float detail = 1.0;
uniform float distortion : hint_range(0.0, 1.0);
uniform float heightOffset : hint_range(0.0, 1.0);

// With the offset value, you can if you want different moves for each asset. Just put a random value (1, 2, 3) in the editor. Don't forget to mark the material as unique if you use this
uniform float offset = 0; 


float getWind(vec2 vertex, vec2 uv, float time){
    float diff = pow(maxStrength - minStrength, 2.0);
    float strength = clamp(minStrength + diff + sin(time / interval) * diff, minStrength, maxStrength) * strengthScale;
    float wind = (sin(time) + cos(time * detail)) * strength * max(0, (1.0-uv.y)-heightOffset);
	return wind;
}

float getWind1(vec2 vertex, vec2 uv, float time){
    float diff = pow(maxStrength - minStrength, 2.0);
    float strength = clamp(minStrength + diff + sin(time / interval) * diff, minStrength, maxStrength) * strengthScale;
    float wind = (sin(time) + cos(time * detail)) * strength * max(0, (1.0-uv.y)-heightOffset);
	return wind;
}

void vertex() {
    //float time = TIME * speed + offset;
    //VERTEX.x += getWind1(VERTEX.xy, UV, time);
	if (VERTEX.y > 0.0)
	{
	 VERTEX.x += cos(TIME)*20.0;
	}
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/speed = 1.0
shader_param/minStrength = 0.05
shader_param/maxStrength = 0.01
shader_param/strengthScale = 100.0
shader_param/interval = 3.5
shader_param/detail = 1.0
shader_param/distortion = null
shader_param/heightOffset = 0.353
shader_param/offset = 0.0

[sub_resource type="Shader" id=3]
code = "shader_type canvas_item;
void vertex() {
    //float time = TIME * speed + offset;
    //VERTEX.x += getWind1(VERTEX.xy, UV, time);
	VERTEX.x += cos(TIME)*sin(VERTEX.y*TIME);
}"

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 3 )

[sub_resource type="SphereMesh" id=5]
radius = 2.0
radial_segments = 100
rings = 100

[node name="Node2D" type="Node2D"]

[node name="TextureRect" type="TextureRect" parent="."]
material = SubResource( 2 )
margin_right = 33.0
margin_bottom = 66.0
texture = ExtResource( 1 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="MeshInstance2D" type="MeshInstance2D" parent="."]
material = SubResource( 4 )
position = Vector2( 127, 93.0156 )
scale = Vector2( 40.0937, -80.9844 )
mesh = SubResource( 5 )
texture = ExtResource( 2 )
